<?php

namespace PricerBundle\Repository;

use Doctrine\ORM\Mapping;

/**
 * OriginalPriceListRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OriginalPriceListRepository extends AbstractPriceListRepository
{



    public function multipleInsert(array $data, array $params, array $priceSettings, $toClean = true)
    {
        if ($toClean) {
            $this->clearBy('priceList_id', $params['priceListId']);
        }
        $readyData = array();
        $placeHolders = '';
        foreach ($data as $row) {
            if (is_null($row[$priceSettings['codeColumn'] - 1])) {
                continue;
            }
            $readyData[] = $params['userId'];
            $readyData[] = $row[$priceSettings['codeColumn'] - 1];
            $readyData[] = $row[$priceSettings['brandColumn'] - 1];
            $readyData[] = $row[$priceSettings['nameColumn'] - 1];
            $readyData[] = (float)preg_replace('|(,)|', '.', $row[$priceSettings['priceColumn'] - 1]);

            $quantityColumns = explode(',', $priceSettings['quantityColumn']);
            $quantity = 0;
            foreach ($quantityColumns as $column) {
                $number = ((int)trim($column)) - 1;
                $quantity += (int)preg_replace('|[\D]|', '', $row[$number]);
            }
            $readyData[] = $quantity;
            $readyData[] = $params['priceListId'];
            $placeHolders .= ' (?, ?, ?, ?, ?, ?, ?),';
        }
        $query = "INSERT INTO {$this->getTableName()} (`user_id`, `vendor_code`, `brand`, `name`, `price`, `quantity`, 
                `priceList_id`)  VALUES" . chop($placeHolders, ',');
        $connection = $this->getEntityManager()->getConnection();
        $connection->executeUpdate($query, $readyData);
    }

    public function findByPriceListId($priceListId, $maxResult, $startResult)
    {
        return $this->createQueryBuilder('opl')
            ->where('opl.priceList='.$priceListId)
            ->setMaxResults($maxResult)
            ->setFirstResult($startResult)
            ->getQuery()
            ->getArrayResult();
    }

    public function getCount($priceListId)
    {
        $qb = $this->createQueryBuilder('opl');
        return $qb->select($qb->expr()->count('opl.id'))->where('opl.priceList='.$priceListId)->getQuery()->getSingleScalarResult();
    }

    protected function getTableName()
    {
        return 'original_price_list';
    }
}
